#!/usr/bin/pythonfrom __future__ import divisionfrom Tkinter import *import Tkinter as tkimport tkMessageBoximport re#------------------File solving----------------------------#def higherPrecedence(string):    if(string == 'sin' or string == 'cos' or string == 'tan' or string == 'ln'):        return 4    elif string == '^':        return 3    elif string == '+' or string =='-' :        return 1    elif string == '*' or string == '/':        return 2    elif string == '(':        return 0    return 0def operator(string):    if string == '^' or string == '+' or string == '-' or string == '*' or string == '/' :        return stringdef solveFile(file, param):        num = []    splitString = []    equationList = []    opStack = []    finalStack = []    postfixStack = []    equationsToPrint = []    checkNum = []    count = 0    #open file and read    try:        with open(file) as f:            lineNum = 0            for line in f:                count = 0                splitString = []                string = line                content = string                content = content.replace(" ", "")                opCount = content.count("ln") +content.count("sec") +content.count("csc") +content.count("cot") +content.count("tan") + content.count("cos") + content.count("sin") + content.count("^") + content.count("+") + content.count("-") + content.count("*") + content.count("/")                cList = []                cList = re.split('[\^\*\-\+\/\(\)\\n]', content)                count = 0                numCount = 0                if content.count("(") != content.count(")"):    #checks for odd number of parentheses                    if(param == 1):                        tkMessageBox.showinfo("File Read Error", "An invalid arithmetic expression on line " + str(lineNum) + " : mismatch parentheses")                    else:                        print "ERROR: An invalid arithmetic expression on line " + str(lineNum) + " : mismatch parentheses"                    count =1                for x in range(len(cList)):                    if(not cList[x].isalpha() and cList[x] != "\n" and cList[x] != "^" and cList[x] != "(" and cList[x] != ")"  and cList[x] != "+"  and cList[x] != "-"  and cList[x] != "*"  and cList[x] != "/" and cList[x] != ""):                        numCount += 1                    if (cList[x].isalpha() and cList[x] != "\n" and cList[x] != "^" and cList[x] != "+"  and cList[x] != "-"  and cList[x] != "*"  and cList[x] != "/" and cList[x] != ""):                        numCount += 1                    if(not cList[x].isalpha() and not cList[x].isdigit() and cList[x] != "^" and cList[x] != "(" and cList[x] != ")"  and cList[x] != "+"  and cList[x] != "-"  and cList[x] != "*"  and cList[x] != "/" and cList[x] != "" and cList[x] != " " and cList[x] != "\n"):                        if(param == 1):                            tkMessageBox.showinfo("Message", "An invalid arithmetic expression on line " + str(lineNum) + " character "+ str(x) + " : invalid symbol " + str(cList[x]))                            continue                        elif(param ==2):                            print "\nERROR: An invalid arithmetic expression on line " + str(lineNum) + " character " + str(x) + " : invalid symbol " + str(cList[x])                            print "Equation on line " + str(lineNum) + " will not be saved."                            continue                if(opCount == 0 and numCount == 1):                    count = 0                elif ( opCount < numCount -1 or numCount == 0 or opCount == 0):                    if(param == 1):                        tkMessageBox.showinfo("File Read Error","An invalid arithmetic expression on line " + str(lineNum) + " : missing operators")                    else:                        print "ERROR: An invalid arithmetic expression on line " + str(lineNum) + " : missing operators"                    count =1                elif (opCount > numCount -1 or numCount == 0 or opCount == 0):                    if(param == 1):                        tkMessageBox.showinfo("File Read Error","An invalid arithmetic expression on line " + str(lineNum) + " : missing operands")                    else:                        print "ERROR: An invalid arithmetic expression on line " + str(lineNum) + " : missing operands"                    count = 1                if count == 0:                                while(True):                        while(True):                            if(count >= len(string)):                                break                            if(string[count] != '^' and string[count] != '+' and string[count] != '-' and string[count] != '/' and string[count] != '*' and string[count] != '(' and string[count] != ')' and string[count] != '\n' and string[count] != ""):                                num.append(string[count])                                count+=1                            else:                                break                        splitString.append("".join(num))                                               finalStack = [x for x in finalStack if x != '(' and x != '']                        # isAllAlpha = all(letter.isalpha() for letter in checkNum)                        # if ( isAllAlpha and checkNum != 'ln' and checkNum != 'sin' and checkNum != 'tan' and checkNum != 'cos' and checkNum != 'cot' and checkNum != 'csc' and checkNum != 'sec' and checkNum != ""):                        #     if(param == 1):                        #         tkMessageBox.showinfo("ERROR","An invalid arithmetic expression on line " +str(lineNum) + " : Missing operators between variables" + str(checkNum))                        #     elif(param == 2):                        #         print "\nERROR: An invalid arithmetic expression on line " +str(lineNum) + ": missing operators between variables  " + str(checkNum)[1:-1] + "\n"                                                if(count >= len(string) ):                            break                        if(string[count] == '^' or string[count] == '+' or string[count] == '-' or string[count] == '/' or string[count] == '*' or string[count] == '(' or string[count] == ')'):                            splitString.append(string[count])                        count+=1                                        num = []                    splitString = [x for x in splitString if x != '']                    equationList.append(splitString)                    equationsToPrint.append(splitString)                    for i in equationList:                        for x in i:                            if(x != '^' and x != '+' and x != '-' and x != '/' and x != '*' and x != '(' and x !=')'):                                finalStack.append(x)                            elif(x == '('):                                opStack.append(x)   #push onto opStack                            elif(x == ')'):                                for y in opStack:                                    if(y != '('):                                        finalStack.append(opStack.pop())                            elif(x == '^' or x == '+' or x == '-' or x == '/' or x == '*'):                                op = x                                for y in opStack:                                    if(higherPrecedence(y) >= higherPrecedence(op)):                                        finalStack.append(opStack.pop())                                opStack.append(x)                    if(opStack):                        for x in opStack:                            finalStack.append(opStack.pop())                    if(opStack):                        finalStack.append(opStack.pop())                    finalStack = [x for x in finalStack if x != '(' and x != '']                    x = 0                    while(True):# Switches the trig function and its value so that it can be calculated as a post fix expression                        if(x >= len(finalStack)):                            break;                        if (finalStack[x] == 'ln' or finalStack[x] == 'sin' or finalStack[x] == 'tan' or finalStack[x] == 'cos' or finalStack[x] == 'cot' or finalStack[x] == 'csc' or finalStack[x] == 'sec'):                            index = x                                        val = finalStack[index + 1]                            finalStack[index+1] = finalStack[x]                            finalStack[index] = val                            x+=1                        x+=1                    postfixStack.append(finalStack)                    finalStack = []                    equationList = []                lineNum+=1        if(postfixStack): #Stores the postfix versions of all the equations in the file            fileCalculate(postfixStack, equationsToPrint, param)    except IOError:        if(param == 1):            tkMessageBox.showinfo("ERROR", "The file '" + file + "' was not found.")        else:            print "ERROR: The file '" + file + "' was not found."        return 0def fileCalculate(postfixEx,eTP, param):    num = 0    result = []    resultRange = []    varCheck = 0    t = 0    alpha = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"    if(param == 1 and range1Entry.get() != "" and range2Entry.get != ""):        rangeX = int(range1Entry.get())        rangeY = int(range2Entry.get())    else:        rangeX = -10        rangeY = 10     for i in postfixEx:        for x in i:            num = None            resultRange = []            if(x.isdigit()):                result.append(int(x))            elif(x in alpha):                result.append(x)                varCheck = 1                    elif(result):                if(x == 'ln'):                    a = result.pop()                    t = float(a)                    n = 1000.0                    num = n *((t**(1/n)) -1)                elif (x == 'sin'):                    a = result.pop()                    num = t =  float(a)                    num = t                    temp = - t* t                    n = 0                    while (abs(t) > 1.0e-10):                        n += 2                        t*= temp / (n*(n+1))                        num += t                elif (x == 'cos'):                    a = result.pop()                    num = t =  float(a)                    temp = - t* t                    n = 0                    while (abs(t) > 1.0e-10):                        n += 2                        t*= temp / ((n - 1) * (n))                        num += t                elif (x == 'tan'):                    a = result.pop()                    t = sinVal = cosVal = float(a)                    temp = - t* t                    n = 0                    while (abs(t) > 1.0e-10):                        n += 2                        t*= temp / (n*(n+1))                        sinVal += t                    n = 0                    t =  float(a)                    while (abs(t) > 1.0e-10):                        n += 2                        t*= temp / ((n - 1) * (n))                        cosVal += t                    num = sinVal/cosVal                elif (x == 'csc'):                    a = result.pop()                    num = t =  float(a)                    temp = - t* t                    n = 0                    while (abs(t) > 1.0e-10):                        n += 2                        t*= temp / ((n - 1) * (n))                        num += t                    num = 1/num                elif (x == 'sec'):                    a = result.pop()                    num = t =  float(a)                    temp = - t* t                    n = 0                    while (abs(t) > 1.0e-10):                        n += 2                        t*= temp / ((n - 1) * (n))                        num += t                    num = 1/num                elif (x == 'cot'):                    a = result.pop()                    t = sinVal = cosVal = float(a)                    temp = - t* t                    n = 0                    while (abs(t) > 1.0e-10):                        n += 2                        t*= temp / (n*(n+1))                        sinVal += t                    n = 0                    t =  float(a)                    while (abs(t) > 1.0e-10):                        n += 2                        t*= temp / ((n - 1) * (n))                        cosVal += t                    num = sinVal/cosVal                    num = 1/num                elif (x == '+'):                    a = result.pop()                    b = result.pop()                    if(str(a) in alpha and str(b) in alpha):                        for y in range(rangeX,rangeY):                            for u in range(rangeX,rangeY):                                num = int(u) + int(y)                                resultRange.append(num)                    elif(str(a) in alpha):                        for y in range(rangeX,rangeY):                            num = int(y) + b                            resultRange.append(num)                    elif(str(b) in alpha):                        for y in range(rangeX,rangeY):                            num = a + int(y)                            resultRange.append(num)                                 elif isinstance(a,list):                        for y in a:                            num = int(y) + b                            resultRange.append(num)                    elif isinstance(b,list):                        for y in b:                            num = a + int(y)                            resultRange.append(num)                    else:                        num = a + b                elif(x == '-'):                    a = result.pop()                    b = result.pop()                    if(str(a) in alpha and str(b) in alpha):                        for y in range(rangeX,rangeY):                            for u in range(rangeX,rangeY):                                num = int(u) - int(y)                                resultRange.append(num)                    elif(str(a) in alpha):                        for y in range(rangeX,rangeY):                            num = int(y) - b                            resultRange.append(num)                    elif(str(b) in alpha):                        for y in range(rangeX,rangeY):                            num = a - int(y)                            resultRange.append(num)                                        elif isinstance(a,list):                        for y in a:                            num = int(y) - b                            resultRange.append(num)                    elif isinstance(b,list):                        for y in b:                            num = a - int(y)                            resultRange.append(num)                    else:                        num = b - a                elif(x == '*'):                    a = result.pop()                    b = result.pop()                    if(str(a) in alpha and str(b) in alpha):                        for y in range(rangeX,rangeY):                            for u in range(rangeX,rangeY):                                num = int(u) * int(y)                                resultRange.append(num)                    elif(str(a) in alpha):                        for y in range(rangeX,rangeY):                            num = int(y) * b                            resultRange.append(num)                    elif(str(b) in alpha):                        for y in range(rangeX,rangeY):                            num = a * int(y)                            resultRange.append(num)                                        elif isinstance(a,list):                        for y in a:                            num = int(y) * b                            resultRange.append(num)                    elif isinstance(b,list):                        for y in b:                            num = a * int(y)                            resultRange.append(num)                    else:                        num = a * b                elif (x== '/'):                    a = result.pop()                    b = result.pop()                    if(str(a) in alpha and str(b) in alpha):                        for y in range(rangeX,rangeY):                            for u in range(rangeX,rangeY):                                if(int(u) == 0):                                    continue                                num = int(y) / int(u)                                resultRange.append(num)                    elif(str(a) in alpha):                        for y in range(rangeX,rangeY):                            if(int(y) == 0):                                continue                            num =  b / int(y)                            resultRange.append(num)                    elif(str(b) in alpha):                        for y in range(rangeX,rangeY):                            if(a == 0 and param == 1):                                tkMessageBox.showinfo("ERROR", "Division by Zero\n")                                return                            else:                                print "\nERROR: Division by Zero\n"                                return                            num = int(y) / a                            resultRange.append(num)                                        elif isinstance(a,list):                        for y in a:                            if(int(y) == 0):                                continue                            num = b / int(y)                            resultRange.append(num)                    elif isinstance(b,list):                        for y in b:                            if(a == 0 and param == 1):                                tkMessageBox.showinfo("ERROR", "Division by Zero\n")                                return                            else:                                print "\nERROR: Division by Zero\n"                                return                            num = int(y) / a                            resultRange.append(num)                    else:                        if(a == 0 and param == 1):                            tkMessageBox.showinfo("ERROR", "Division by Zero\n")                            return                        elif(a == 0 and param == 2):                            print "\nERROR: Division by Zero\n"                            return                        num = b / a                elif(x == '^'):                    a = result.pop()                    b = result.pop()                    if(str(a) in alpha and str(b) in alpha):                        for y in range(rangeX,rangeY):                            for u in range(rangeX,rangeY):                                num = int(y) ** int(u)                                resultRange.append(num)                    elif(str(a) in alpha):                        for y in range(rangeX,rangeY):                            num = b ** int(y)                            resultRange.append(num)                    elif(str(b) in alpha):                        for y in range(rangeX,rangeY):                            num = int(y) ** a                            resultRange.append(num)                                 elif isinstance(a,list):                        for y in a:                            num = b ** int(y)                            resultRange.append(num)                    elif isinstance(b,list):                        for y in b:                            num = int(y) ** a                            resultRange.append(num)                    else:                        num = b ** a            if(num != None and varCheck == 0):                result.append(num)            elif(varCheck == 1 and resultRange):                result.append(resultRange)    if(param == 1):        if(varCheck == 1 and result):            string = ""            for i in result:                count = rangeX                for k in i:                    string += "\n" + str(k) + "\n"                    count+=1            tkMessageBox.showinfo("Result(s)", string)        else :            string = ""            for x in range(len(result)):                string += "\n" + "".join(eTP[x]) + " = " + str(result[x]) + "\n"            tkMessageBox.showinfo("Result(s)", string)    elif(param == 2):        if(varCheck == 1 and result):            print "Range: " + str(rangeX) + "-" + str(rangeY) +"\n"             for i in result:                count = rangeX                for k in i:                    print str(k)                    count+=1        else:            print "\nResult(s)"            print "=========="             for x in range(len(result)):                print "".join(eTP[x]) + " = " + str(result[x])            print "\n"#---------------ComputeSolution----------------#def validate(param):    if(param == 1):        content = expressionEntry.get()    elif(param == 2):        content = raw_input()    content = content.replace(" ", "")    opCount = content.count("ln") +content.count("sec") +content.count("csc") +content.count("cot") +content.count("tan") + content.count("cos") + content.count("sin") + content.count("^") + content.count("+") + content.count("-") + content.count("*") + content.count("/")    num = ""    cList = []    cList = re.split('[\^\*\-\+\/\(\)]', content)    count = 0    vaRcount = 0    numCount = 0    if content.count("(") != content.count(")"):    #checks for odd number of parentheses        if(param == 1):            tkMessageBox.showinfo("Message", "An invalid arithmetic expression: mismatch parentheses")        elif(param == 2):            print "\nERROR: An invalid arithmetic expression: mismatch parentheses\n"        count =1    for x in range(len(cList)):        if(not cList[x].isalpha() and cList[x] != "^" and cList[x] != "(" and cList[x] != ")"  and cList[x] != "+"  and cList[x] != "-"  and cList[x] != "*"  and cList[x] != "/" and cList[x] != ""):            numCount += 1        if (cList[x].isalpha()  and cList[x] != "^" and cList[x] != "+"  and cList[x] != "-"  and cList[x] != "*"  and cList[x] != "/" and cList[x] != ""):            numCount += 1        if(not cList[x].isalpha() and not cList[x].isdigit() and cList[x] != "^" and cList[x] != "(" and cList[x] != ")"  and cList[x] != "+"  and cList[x] != "-"  and cList[x] != "*"  and cList[x] != "/" and cList[x] != ""):            if(param == 1):               tkMessageBox.showinfo("Message", "An invalid arithmetic expression: invalid symbol in expression")            elif(param ==2):                print "\nERROR: An invalid arithmetic expression: invalid symbol in expression\n"            count = 1;    if(opCount == 0 and numCount == 1):        count = 0    elif ( opCount < numCount -1 or numCount == 0 or opCount == 0):        if(param == 1):            tkMessageBox.showinfo("Message","An invalid arithmetic expression: missing operators")        elif(param ==2):            print "\nERROR: An invalid arithmetic expression: missing operators\n"        count =1    elif (opCount > numCount -1 or numCount == 0 or opCount == 0):        if(param == 1):            tkMessageBox.showinfo("Message","An invalid arithmetic expression: missing operands")        elif(param == 2):            print "\nERROR: An invalid arithmetic expression: missing operands\n"        count = 1    if (count == 0):                eval_postfix(content, param)def higherPrecedence(operator):    if(operator == 'sin' or operator == 'cos' or operator == 'tan' or operator == 'ln'):        return 4    elif(operator == '^'):        return 3    elif(operator == '*' or operator == '/'):        return 2    elif(operator =='+' or operator == '-'):        return 1    return 0def calculate(postfixEx, param):    num = 0    result = []    resultRange = []    varCheck = 0    t = 0    alpha = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"    if(param == 1 and range1Entry.get() != "" and range2Entry.get != ""):        rangeX = int(range1Entry.get())        rangeY = int(range2Entry.get())    else:        rangeX = -10        rangeY = 10    for x in postfixEx:        num = None        resultRange = []        if(x.isdigit()):            result.append(int(x))        elif(x in alpha):            result.append(x)            varCheck = 1                elif(result):            if(x == 'ln'):                a = result.pop()                t = float(a)                n = 1000.0                num = n *((t**(1/n)) -1)            elif (x == 'sin'):                a = result.pop()                num = t =  float(a)                num = t                temp = - t* t                n = 0                while (abs(t) > 1.0e-10):                    n += 2                    t*= temp / (n*(n+1))                    num += t            elif (x == 'cos'):                a = result.pop()                num = t =  float(a)                temp = - t* t                n = 0                while (abs(t) > 1.0e-10):                    n += 2                    t*= temp / ((n - 1) * (n))                    num += t            elif (x == 'tan'):                a = result.pop()                t = sinVal = cosVal = float(a)                temp = - t* t                n = 0                while (abs(t) > 1.0e-10):                    n += 2                    t*= temp / (n*(n+1))                    sinVal += t                n = 0                t =  float(a)                while (abs(t) > 1.0e-10):                    n += 2                    t*= temp / ((n - 1) * (n))                    cosVal += t                num = sinVal/cosVal            elif (x == 'csc'):                a = result.pop()                num = t =  float(a)                temp = - t* t                n = 0                while (abs(t) > 1.0e-10):                    n += 2                    t*= temp / ((n - 1) * (n))                    num += t                num = 1/num            elif (x == 'sec'):                a = result.pop()                num = t =  float(a)                temp = - t* t                n = 0                while (abs(t) > 1.0e-10):                    n += 2                    t*= temp / ((n - 1) * (n))                    num += t                num = 1/num            elif (x == 'cot'):                a = result.pop()                t = sinVal = cosVal = float(a)                temp = - t* t                n = 0                while (abs(t) > 1.0e-10):                    n += 2                    t*= temp / (n*(n+1))                    sinVal += t                n = 0                t =  float(a)                while (abs(t) > 1.0e-10):                    n += 2                    t*= temp / ((n - 1) * (n))                    cosVal += t                num = sinVal/cosVal                num = 1/num            elif (x == '+'):                a = result.pop()                b = result.pop()                if(str(a) in alpha and str(b) in alpha):                    for y in range(rangeX,rangeY):                        for u in range(rangeX,rangeY):                            num = int(u) + int(y)                            resultRange.append(num)                elif(str(a) in alpha):                    for y in range(rangeX,rangeY):                        num = int(y) + b                        resultRange.append(num)                elif(str(b) in alpha):                    for y in range(rangeX,rangeY):                        num = a + int(y)                        resultRange.append(num)                  elif  isinstance(a,list) and isinstance(b,list):                     for x in a:                        for y in b:                            num = int(y) + int(x)                            resultRange.append(num);                      elif isinstance(a,list):                    for y in a:                        num = int(y) + b                        resultRange.append(num)                elif isinstance(b,list):                    for y in b:                        num = a + int(y)                        resultRange.append(num)                else:                    num = a + b            elif(x == '-'):                a = result.pop()                b = result.pop()                if(str(a) in alpha and str(b) in alpha):                    for y in range(rangeX,rangeY):                        for u in range(rangeX,rangeY):                            num = int(u) - int(y)                            resultRange.append(num)                elif(str(a) in alpha):                    for y in range(rangeX,rangeY):                        num = int(y) - b                        resultRange.append(num)                elif(str(b) in alpha):                    for y in range(rangeX,rangeY):                        num = a - int(y)                        resultRange.append(num)                elif  isinstance(a,list) and isinstance(b,list):                     for x in a:                        for y in b:                            num = int(y) - int(x)                            resultRange.append(num);                   elif isinstance(a,list):                    for y in a:                        num = int(y) - b                        resultRange.append(num)                elif isinstance(b,list):                    for y in b:                        num = int(y) -a                          resultRange.append(num)                else:                    num = a - b            elif(x == '*'):                a = result.pop()                b = result.pop()                if(str(a) in alpha and str(b) in alpha):                    for y in range(rangeX,rangeY):                        for u in range(rangeX,rangeY):                            num = int(u) * int(y)                            resultRange.append(num)                elif(str(a) in alpha):                    for y in range(rangeX,rangeY):                        num = int(y) * b                        resultRange.append(num)                elif(str(b) in alpha):                    for y in range(rangeX,rangeY):                        num = a * int(y)                        resultRange.append(num)                elif  isinstance(a,list) and isinstance(b,list):                     for x in a:                        for y in b:                            num = int(y) * int(x)                            resultRange.append(num);                   elif isinstance(a,list):                    for y in a:                        num = int(y) * b                        resultRange.append(num)                elif isinstance(b,list):                    for y in b:                        num = a * int(y)                        resultRange.append(num)                else:                    num = a * b            elif (x== '/'):                a = result.pop()                b = result.pop()                if(str(a) in alpha and str(b) in alpha):                    for y in range(rangeX,rangeY):                        for u in range(rangeX,rangeY):                            if(int(u) == 0):                                continue                            num = int(y) / int(u)                            resultRange.append(num)                elif(str(a) in alpha):                    for y in range(rangeX,rangeY):                        if(int(y) == 0):                            continue                        num =  b / int(y)                        resultRange.append(num)                elif(str(b) in alpha):                    for y in range(rangeX,rangeY):                        if(a == 0 and param == 1):                            tkMessageBox.showinfo("ERROR", "Division by Zero\n")                            return                        else:                            print "\nERROR: Division by Zero\n"                            return                        num = int(y) / a                        resultRange.append(num)                elif  isinstance(a,list) and isinstance(b,list):                     for x in a:                        for y in b:                            if(int(y) == 0):                                continue                            num = int(x) / int(y)                            resultRange.append(num);                   elif isinstance(a,list):                    for y in a:                        if(int(y) == 0):                            continue                        num = b / int(y)                        resultRange.append(num)                elif isinstance(b,list):                    for y in b:                        if(a == 0 and param == 1):                            tkMessageBox.showinfo("ERROR", "Division by Zero\n")                            return                        else:                            print "\nERROR: Division by Zero\n"                            return                        num = int(y) / a                        resultRange.append(num)                else:                    if(a == 0 and param == 1):                        tkMessageBox.showinfo("ERROR", "Division by Zero\n")                        return                    elif (a == 0 and param == 2):                        print "\nERROR: Division by Zero\n"                        return                    num = b / a            elif(x == '^'):                a = result.pop()                b = result.pop()                if(str(a) in alpha and str(b) in alpha):                    for y in range(rangeX,rangeY):                        for u in range(rangeX,rangeY):                            num = int(y) ** int(u)                            resultRange.append(num)                elif(str(a) in alpha):                    for y in range(rangeX,rangeY):                        num = b ** int(y)                        resultRange.append(num)                elif(str(b) in alpha):                    for y in range(rangeX,rangeY):                        num = int(y) ** a                        resultRange.append(num)                    elif  isinstance(a,list) and isinstance(b,list):                     for x in a:                        for y in b:                            num = int(x) ** int(y)                            resultRange.append(num);                            elif isinstance(a,list):                    for y in a:                        num = b ** int(y)                        resultRange.append(num)                elif isinstance(b,list):                    for y in b:                        num = int(y) ** a                        resultRange.append(num)                else:                    num = b ** a        if(num != None and varCheck == 0):            result.append(num)        elif(varCheck == 1 and resultRange):            result.append(resultRange)    print rangeX    allCoords = []    if(param == 1):        string = "Range: " + str(rangeX) + "-" + str(rangeY) +"\n"               if(varCheck == 1 and result):            for i in result:                count = rangeX                for k in i:                    coords = []                    coords.append(count);                    coords.append(k);                    string += '\n' + str(k) + '\n'                    count+=1                    allCoords.append(coords)            print allCoords            tkMessageBox.showinfo("Result(s)", string)            return allCoords        else :            tkMessageBox.showinfo("Result(s)", str(result[0]))    else:          if(varCheck == 1 and result):            print "Range: " + str(rangeX) + "-" + str(rangeY) +"\n"             for i in result:                count = rangeX                for k in i:                    print str(k)                    count+=1        else:            print "\nResult: " + str(result)[1:-1] + "\n"def eval_postfix(string, param):    num = []    splitString = []    opStack = []    finalStack = []    count = 0    while(True):        while(True):            if(count >= len(string)):                break            if(string[count] != '^' and string[count] != '+' and string[count] != '-' and string[count] != '/' and string[count] != '*' and string[count] != '(' and string[count] != ')'):                num.append(string[count])                count+=1                        else:                break        splitString.append("".join(num))        # if (splitString != 'ln' or splitString != 'sin' or splitString != 'tan' or splitString != 'cos' or splitString != 'cot' or splitString != 'csc' or splitString != 'sec'):        #     if(param == 1):        #         tkMessageBox.showinfo("ERROR","An invalid arithmetic expression: Missing operators between variables")        #         return        #     elif(param == 2):        #         print "\nERROR: An invalid arithmetic expression: missing operators between variables\n"        #         return        if(count >= len(string) ):            break        if(string[count] == '^' or string[count] == '+' or string[count] == '-' or string[count] == '/' or string[count] == '*' or string[count] == '(' or string[count] == ')'):            splitString.append(string[count])        count+=1                        num = []    for x in splitString:        if(x != '^' and x != '+' and x != '-' and x != '/' and x != '*' and x != '(' and x !=')'):            finalStack.append(x)        elif(x == '('):            opStack.append(x)   #push onto opStack        elif(x == ')'):            for y in opStack:                if(y != '('):                    finalStack.append(opStack.pop())        elif(x == '^' or x == '+' or x == '-' or x == '/' or x == '*'):            op = x            for y in opStack:                if(higherPrecedence(y) >= higherPrecedence(op)):                    finalStack.append(opStack.pop())            opStack.append(x)    if(opStack):        for x in opStack:            finalStack.append(opStack.pop())    if(opStack):        finalStack.append(opStack.pop())    finalStack = [x for x in finalStack if x != '(' and x != '']    x = 0    while(True):     # Switches the trig function and its value so that it can be calculated as a post fix expression        if(x >= len(finalStack)):            break;        if (finalStack[x] == 'ln' or finalStack[x] == 'sin' or finalStack[x] == 'tan' or finalStack[x] == 'cos' or finalStack[x] == 'cot' or finalStack[x] == 'csc' or finalStack[x] == 'sec'):            index = x                        val = finalStack[index + 1]            finalStack[index+1] = finalStack[x]            finalStack[index] = val            x+=1        x+=1    calculate(finalStack, param)#--------------Validation----------------------#def validateExpression(expression):    result = 0    num = expression.count(')')    num2 = expression.count('(')    opr1 = expression.count('+')    opr2 = expression.count('-')    opr3 = expression.count('*')    opr4 = expression.count('/')    if (opr1 == 0 and opr2 == 0 and opr3 == 0 and opr4 == 0):        result = 1    elif (num != num2):        result = 2    else:        length = len(expression)        for x in range(0, length):            if (expression[0] == '+' or expression[0] == '-' or expression[0] == '/' or expression[0] == '*'):                result = 1                break            if (expression[length - 1] == '+' or expression[length - 1] == '-' or expression[length - 1] == '/' or                        expression[length - 1] == '*'):                result = 1                break            if (expression[x] == '+' or expression[x] == '-' or expression[x] == '/' or expression[x] == '*'):                if (expression[x - 1] != '0' and expression[x - 1] != '1' and expression[x - 1] != '2' and expression[                        x - 1] != '3' and expression[x - 1] != '4' and expression[x - 1] != '5'                    and expression[x - 1] != '6' and expression[x - 1] != '7' and expression[x - 1] != '8' and                            expression[x - 1] != '9' and expression[x - 1] != 'a' and expression[x - 1] != 'b'                    and expression[x - 1] != 'c' and expression[x - 1] != 'd' and expression[x - 1] != 'e' and                            expression[x - 1] != 'f' and expression[x - 1] != 'g' and expression[x - 1] != 'h'                    and expression[x - 1] != 'i' and expression[x - 1] != 'j' and expression[x - 1] != 'k' and                            expression[x - 1] != 'l' and expression[x - 1] != 'm' and expression[x - 1] != 'n'                    and expression[x - 1] != 'o' and expression[x - 1] != 'p' and expression[x - 1] != 'q' and                            expression[x - 1] != 'r' and expression[x - 1] != 's' and expression[x - 1] != 't'                    and expression[x - 1] != 'u' and expression[x - 1] != 'v' and expression[x - 1] != 'w' and                            expression[x - 1] != 'x' and expression[x - 1] != 'y' and expression[x - 1] != 'z'                    and expression[x - 1] != ')' and expression[x - 1] != ' '):                    result = 1                    break                elif (expression[x + 1] != '0' and expression[x + 1] != '1' and expression[x + 1] != '2' and expression[                        x + 1] != '3' and expression[x + 1] != '4' and expression[x + 1] != '5'                      and expression[x + 1] != '6' and expression[x + 1] != '7' and expression[x + 1] != '8' and                              expression[x + 1] != '9' and expression[x + 1] != 'a' and expression[x + 1] != 'b'                      and expression[x + 1] != 'c' and expression[x + 1] != 'd' and expression[x + 1] != 'e' and                              expression[x + 1] != 'f' and expression[x + 1] != 'g' and expression[x + 1] != 'h'                      and expression[x + 1] != 'i' and expression[x + 1] != 'j' and expression[x + 1] != 'k' and                              expression[x + 1] != 'l' and expression[x + 1] != 'm' and expression[x + 1] != 'n'                      and expression[x + 1] != 'o' and expression[x + 1] != 'p' and expression[x + 1] != 'q' and                              expression[x + 1] != 'r' and expression[x + 1] != 's' and expression[x + 1] != 't'                      and expression[x + 1] != 'u' and expression[x + 1] != 'v' and expression[x + 1] != 'w' and                              expression[x + 1] != 'x' and expression[x + 1] != 'y' and expression[x + 1] != 'z'                      and expression[x + 1] != '(' and expression[x + 1] != ' '):                    result = 1                    break                elif ((expression[x - 1] == ')') and (expression[x - 2].isdigit() or expression[x - 2].isalpha())):                    result = 0            elif (expression[x] == '(' and x != 0):                if (expression[x - 1].isdigit() or expression[x - 1] == ')'):                    result = 1                    break                elif (expression[x - 1] == ' '):                    if (expression[x - 2].isdigit() or expression[x - 2] == ')'):                        result = 1                        break            elif (expression[x] == ')' and x != (length - 1)):                if (expression[x + 1].isdigit() or expression[x + 1] == '('):                    result = 1                    break                elif (expression[x + 1] == ' '):                    if (expression[x + 2].isdigit() or expression[x + 2] == ')'):                        result = 1                        break            else:                result = 0    if (result == 2):        return ("Valid")    elif (result == 1):        return ("Invalid")    elif (result == 0):        return ("Valid")#-----------Start Menu--------------------------------#usrInput = '0'while usrInput != '3':    print("Choose on of the two modes: ")    print("1.Graphing mode.")    print ("2.Answer Equation")    print("3.Quit program.")        usrInput = input()        if (usrInput.isdigit()):        if usrInput == '1':            root = tk.Tk()                                    def graphFunc():                expressionStr = expressionEntry.get()                coordsPoints = validate(1)                for point in coordsPoints:                    canvas.create_line(point)                                canvas.create_line(100,100,200,200)                        pass                                    def resetClean():                expressionEntry.delete(0, 'end')                range1Entry.delete(0, 'end')                range2Entry.delete(0,'end')                # clean plot.                pass                        root.resizable(width=False, height=False)            root.geometry('{}x{}'.format(700, 100))            # buttons                                    calc = Button(root, text="Calculate", command= lambda: validate(1))            calc.grid(row=0, column=3)                        resetB = Button(root, text="Reset Grapher", command=resetClean)            resetB.grid(row=1, column=0)                        fileSolve = Button(root, text="Solve File", command= lambda: solveFile(fileEntry.get(), 1))            fileSolve.grid(row=0, column=7)                        # Labels            enterExpression = Label(root, text="Enter Expression:")            enterExpression.grid(row=0, column=1)            enterRange = Label(root, text="Enter Range(int):")            enterRange.grid(row=1, column=1)                        # Entries            expressionEntry = Entry(root, state=NORMAL)            expressionEntry.grid(row=0, column=2)            fileEntry = Entry(root, state = NORMAL)            fileEntry.grid(row = 0, column = 😎            range1Entry = Entry(root, state=NORMAL)            range1Entry.grid(row=1, column=2)            range2Entry = Entry(root, state=NORMAL)            range2Entry.grid(row=1, column=3)                                       graph = tk.Toplevel()            canvas = Canvas(graph, width = 500, height = 500);            canvas.pack()            graph = Button(root, text="Graph", command=graphFunc)            graph.grid(row=0, column=0)            root.mainloop()            exit()            elif usrInput == '2':            print "Would you like to enter an (e)quation or a (f)ile name?"            userInput = raw_input()            if(userInput == "equation" or userInput == "e"):            print "Enter an equation: "            validate(2)            elif(userInput == "file" or userInput == "f"):            print "Enter a file name: "            file = raw_input()            solveFile(file, 2)            elif usrInput == '3':            print("Quitting program.......")            else:            print("Please try again.")#----------------------------------------------------#